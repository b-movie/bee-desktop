import { app, BrowserWindow, ipcMain } from "electron";
import WebTorrent from "webtorrent-hybrid";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 1024,
    width: 1280,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow();
  const client = new WebTorrent();
  let timer: NodeJS.Timer;

  ipcMain.handle("start-torrent", (_, infoHash, fileIdx) => {
    console.log("start-torrent", infoHash, fileIdx);

    const torrent = client.get(infoHash);
    if (torrent) {
      console.log(`torrent ${infoHash} already exists`);
      return;
    }

    client.torrents.forEach((torrent: any) => {
      client.remove(torrent.infoHash);
    });

    if (timer) {
      clearInterval(timer);
    }

    client.add(infoHash, (torrent: any) => {
      const file = torrent.files[fileIdx];

      const server = torrent.createServer();
      server.listen(0, () => {
        const port = server.address().port;
        const fileName = encodeURIComponent(file.name);
        const localURL = `http://localhost:${port}`;
        const streamURL = `${localURL}/${fileIdx}/${fileName}`;
        const filePath = `${torrent.path}/${file.name}`;
        const info = {
          fileName,
          filePath,
          localURL,
          streamURL,
        };
        console.log(info);
      });
      timer = setInterval(() => {
        console.log("progress:", `${(torrent.progress * 100).toFixed(2)}%`);
        console.log(
          "download speed:",
          `${formatBytes(torrent.downloadSpeed)}/s`
        );
        console.log("upload speed:", `${formatBytes(torrent.uploadSpeed)}/s`);
      }, 1000);
    });
  });
});

const formatBytes = (bytes: number, decimals = 2) => {
  if (!+bytes) return "0 Bytes";

  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];

  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
};

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
